{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\Manali\\\\vaccine_efficacy_jnj\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [progress, setProgress] = useState(''); // To track progress of backend processes\n\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      alert('Please select a file to upload!');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      setUploadStatus('Uploading file...');\n      setProgress('Uploading file to the server.');\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.status === 200) {\n        setUploadStatus('File uploaded successfully.');\n        setProgress('Extracting data from the uploaded file.');\n        await handleDataExtraction();\n      } else {\n        setUploadStatus('File upload failed.');\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus('Error uploading file.');\n      setProgress('Failed to upload file to the server.');\n    }\n  };\n  const handleDataExtraction = async () => {\n    try {\n      setProgress('Data extraction process started.');\n      const extractionResponse = await axios.get('http://localhost:5000/efficacycount');\n      if (extractionResponse.status === 200) {\n        alert('Data extraction completed successfully.');\n        setProgress('Performing data analysis...');\n        await handleAnalysis();\n      } else {\n        setProgress('Error during data extraction.');\n        alert('Data extraction failed.');\n      }\n    } catch (error) {\n      console.error('Error during data extraction:', error);\n      alert('Data extraction failed.');\n    }\n  };\n  const handleAnalysis = async () => {\n    try {\n      setProgress('Running analysis on the extracted data...');\n      const analysisResponse = await axios.get('http://localhost:5000/adversecount');\n      if (analysisResponse.status === 200) {\n        alert('Data analysis completed successfully.');\n        setProgress('Analysis completed. You can now download the results.');\n      } else {\n        setProgress('Error during data analysis.');\n        alert('Data analysis failed.');\n      }\n    } catch (error) {\n      console.error('Error during data analysis:', error);\n      alert('Data analysis failed.');\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Medical Prescription Upload\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Upload and Process\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, uploadStatus), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, progress));\n}\nexport default App;","map":{"version":3,"names":["React","useState","axios","App","selectedFile","setSelectedFile","uploadStatus","setUploadStatus","progress","setProgress","handleFileChange","event","target","files","handleFileUpload","alert","formData","FormData","append","response","post","headers","status","handleDataExtraction","error","console","extractionResponse","get","handleAnalysis","analysisResponse","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick"],"sources":["C:/Users/Dell/Desktop/Manali/vaccine_efficacy_jnj/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [uploadStatus, setUploadStatus] = useState('');\r\n  const [progress, setProgress] = useState(''); // To track progress of backend processes\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleFileUpload = async () => {\r\n    if (!selectedFile) {\r\n      alert('Please select a file to upload!');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', selectedFile);\r\n\r\n    try {\r\n      setUploadStatus('Uploading file...');\r\n      setProgress('Uploading file to the server.');\r\n\r\n      const response = await axios.post('http://localhost:5000/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setUploadStatus('File uploaded successfully.');\r\n        setProgress('Extracting data from the uploaded file.');\r\n        await handleDataExtraction();\r\n      } else {\r\n        setUploadStatus('File upload failed.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      setUploadStatus('Error uploading file.');\r\n      setProgress('Failed to upload file to the server.');\r\n    }\r\n  };\r\n\r\n  const handleDataExtraction = async () => {\r\n    try {\r\n      setProgress('Data extraction process started.');\r\n      const extractionResponse = await axios.get('http://localhost:5000/efficacycount');\r\n\r\n      if (extractionResponse.status === 200) {\r\n        alert('Data extraction completed successfully.');\r\n        setProgress('Performing data analysis...');\r\n        await handleAnalysis();\r\n      } else {\r\n        setProgress('Error during data extraction.');\r\n        alert('Data extraction failed.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during data extraction:', error);\r\n      alert('Data extraction failed.');\r\n    }\r\n  };\r\n\r\n  const handleAnalysis = async () => {\r\n    try {\r\n      setProgress('Running analysis on the extracted data...');\r\n      const analysisResponse = await axios.get('http://localhost:5000/adversecount');\r\n\r\n      if (analysisResponse.status === 200) {\r\n        alert('Data analysis completed successfully.');\r\n        setProgress('Analysis completed. You can now download the results.');\r\n      } else {\r\n        setProgress('Error during data analysis.');\r\n        alert('Data analysis failed.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during data analysis:', error);\r\n      alert('Data analysis failed.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Medical Prescription Upload</h1>\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button onClick={handleFileUpload}>Upload and Process</button>\r\n\r\n      {/* Displaying upload status */}\r\n      <p>{uploadStatus}</p>\r\n\r\n      {/* Showing backend process progress */}\r\n      <p>{progress}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}